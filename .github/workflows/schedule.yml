name: Schedule

permissions:
  contents: write

on:
  schedule:
    - cron: '*/15 * * * *'        # every 15 minutes (UTC)
  workflow_dispatch: {}           # manual trigger

concurrency:
  group: cron-${{ github.workflow }}
  cancel-in-progress: false       # queue one pending run; donâ€™t cancel in-flight

jobs:
  run_notebook:
    runs-on: self-hosted

    steps:
      - name: Gate until first run
        uses: actions/github-script@v6
        id: gate
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
           // Always run immediately if manually triggered
           if (context.eventName === 'workflow_dispatch') {
              core.setOutput('skip', 'false');
              return;
            }
            // Otherwise (schedule), compare timestamps
            const now      = new Date();
            const startAt  = new Date('2025-06-09T03:00:00Z');
            core.setOutput('skip', now < startAt ? 'true' : 'false');

      - name: Skip early runs
        if: steps.gate.outputs.skip == 'true'
        run: echo "ðŸ”’ Waiting for first run time..."

      - name: Checkout repository
        if: steps.gate.outputs.skip == 'false'
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Set up Python & Jupyter
        if: steps.gate.outputs.skip == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ipykernel jupyter papermill nbformat
          python -m ipykernel install --user --name python3 --display-name python3

      - name: Execute notebook
        if: steps.gate.outputs.skip == 'false'
        run: |
          papermill --kernel python3 Holy_Grail.ipynb output.ipynb

      - name: Commit results
        if: steps.gate.outputs.skip == 'false'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: "Scheduled run on $(date)"
          file_pattern: output.ipynb

      - name: Make script executable
        if: steps.gate.outputs.skip == 'false'
        run: chmod +x ./send_to_discord.sh

      - name: Convert notebook to Markdown
        if: steps.gate.outputs.skip == 'false'
        run: |
          pip install --user nbconvert
          python3 -m nbconvert --to markdown output.ipynb --output output.md

      - name: Send last 10 lines to Discord
        if: steps.gate.outputs.skip == 'false'
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |   
          # Pull up to 10 lines (no failure if <10 or empty)
          LAST=$(tail -n10 output.md || true)

          # Build a valid JSON payload (fallback if empty)
          PAYLOAD=$(printf '%s\n' "$LAST" | python3 - << 'PYCODE'
          import sys, json
          text = sys.stdin.read().strip()
          if not text:
              text = "No content to display."
          print(json.dumps({"content": text}))
          PYCODE
          )

          # DEBUG: see exactly what will be sent
          echo "â†’ PAYLOAD: $PAYLOAD"

          # Fire off to Discord
          curl -X POST \
               -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               "$WEBHOOK_URL"
